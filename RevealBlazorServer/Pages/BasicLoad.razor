@page "/"
@page "/basic-load"
@using AcmeAnalyticsServer
@using Models.AcmeAnalyticsServer
@inject IAcmeAnalyticsServerService AcmeAnalyticsServerService
@inject IJSRuntime JSRuntime

<div class="column-layout basic-load-container">
    <div class="column-layout group">
        <IgbCombo Outlined="true" Data="@_acmeAnalyticsServerDashboardNames" ValueKey="DashboardFileName"
                  Placeholder="Select Dashboard ..." DisplayKey="DashboardTitle" T="object" SingleSelect="true"
                  Change="@OnComboChanged"
                  class="single-select-combo" master_view-scope>
        </IgbCombo>

    </div>
    <div class="column-layout group_1">
        <div id="revealView" class="reveal-dash-board" style="height: calc(100vh - 0px); width: 100%; position:relative;"></div>
    </div>
</div>

@code {
    //private string _selectedDashboard;
    private List<DashboardNames> _acmeAnalyticsServerDashboardNames = new();
    private DashboardNames _selectedDashboard;


    protected override async Task OnInitializedAsync()
    {
        _acmeAnalyticsServerDashboardNames = await AcmeAnalyticsServerService.GetDashboardNamesList();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", "Market Rents");
        }
    }

    private async Task OnComboChanged(IgbComboChangeEventArgs e)
    {
       // _selectedDashboard = e.Detail.NewValue; //.FirstOrDefault() as DashboardNames;

        //if (_selectedDashboard is not null)
        //{
      
            await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", e.Detail.NewValue);
       // }
    }


}