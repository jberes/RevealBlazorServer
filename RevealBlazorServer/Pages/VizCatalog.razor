@page "/viz-catalog"
@using Models
@using Reveal.Sdk
@using Reveal.Sdk.Dom
@using Newtonsoft.Json
@inject DashboardService DashboardService
@inject IJSRuntime JSRuntime

<div class="row-layout viz-catalog-container">
    <div class="column-layout group">
        <div class="column-layout group_1">
            <IgbList class="list" viz_catalog-scope>
                @if (visualizationChartInfo != null)
                {
                    @foreach (var item in visualizationChartInfo)
                        {
                            <IgbListItem 
                                style="@SelectCustomCss(item.Id)" 
                                @onclick="() => ListItemClick(item)">
                                <IgbAvatar Src="@($"/Images/Png/{item.VizChartType}.png")" slot="start" class="avatar" viz_catalog-scope />
                                <div slot="title">@item.VizTitle</div>
                                <div slot="subtitle">@item.VizChartType</div>
                                <span @onclick="(e) => IconItemClick(item)" slot="end" class="material-icons icon">
                                    add
                                </span>
                            </IgbListItem>
                        }
                    }
                else
                {
                    <p>Loading visualizations...</p>
                }
            </IgbList>
        </div>

        <div class="column-layout group_2">
            <div id="revealViewSingleViz" class="reveal-dash-board" style="height: calc(100vh - 0px); width: 100%; position:relative;"></div>
        </div>
    </div>

    <div class="column-layout group_3">
        <div id="revealView" class="reveal-dash-board" style="height: calc(100vh - 0px); width: 90%; position:relative;"></div>
    </div>
</div>

@code {
    private List<VisualizationChartInfo> visualizationChartInfo;
    private string? VisualizationId;
    private string? DashboardName;
    private string? VisualizationName;
    private string? VisualizationTitle;
    private string selectedVizKey;


    public List<VizInfo> VizCollection { get; set; } = new();
    public VizInfo SelectedViz { get; set; }
    public VisualizationChartInfo DashboardVisualizations { get; set; }

    private Dictionary<string, RdashDocument> sourceDocs = new();
    private RdashDocument dashboardDocument = new("Generated Dashboard");

    protected override async Task OnInitializedAsync()
    {
        visualizationChartInfo = DashboardService.GetVisualizationChartInfos();
    }

    private async Task ListItemClick(VisualizationChartInfo item)
    {
        selectedVizKey = item.Id;
        VisualizationId = item.VizId;
        DashboardName = item.DashboardFileName;

        await JSRuntime.InvokeVoidAsync("loadRevealViewSingleViz", "revealViewSingleViz", DashboardName, VisualizationId);
    }

    private async Task IconItemClick(VisualizationChartInfo item)
    {
        HandleItemClick(item);
        if (SelectedViz != null)
        {
            VizCollection.Add(SelectedViz);
            await GenerateDashboardAsync();
        }
        else
        {
            Console.WriteLine("Selected visualization is undefined");
        }
    }

    private void HandleItemClick(VisualizationChartInfo item)
    {
        DashboardVisualizations = item;
        VisualizationId = item.VizId;
        VisualizationName = item.VizTitle;
        VisualizationTitle = item.VizTitle;
        DashboardName = item.DashboardFileName;

        if (!string.IsNullOrEmpty(DashboardName) && !string.IsNullOrEmpty(VisualizationId))
        {
            LoadDashboardById(DashboardName, VisualizationId);
            SelectedViz = new VizInfo
            {
                VizId = VisualizationId,
                DashboardTitle = DashboardName,
                VizName = VisualizationName,
                DashboardName = DashboardName,
                Selected = true
            };
        }
    }

   private async Task GenerateDashboardAsync()
    {
       dashboardDocument.Visualizations.Clear();

        var vizList = VizCollection.ToList(); 
                
        var vizCount = vizList.Count;
        if (vizCount == 0)
        {
            Console.WriteLine("No visualizations to add.");
            return;
        }

        foreach (var viz in vizList)
        {
            Console.WriteLine($"Adding Viz Id: {viz.VizId}");
            if (!sourceDocs.ContainsKey(viz.VizId))
            {
                try
                {
                    var result = await JSRuntime.InvokeAsync<string>("getRVDashboardAsJson", viz.DashboardName);
                    var sourceDoc = JsonConvert.DeserializeObject<RdashDocument>(result);
                    sourceDocs[viz.VizId] = sourceDoc;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to load document: {viz.DashboardName}, {ex.Message}");
                    continue;
                }
            }

            var doc = sourceDocs[viz.VizId];
            if (doc != null)
            {
                dashboardDocument.Import(doc, viz.VizId);
                Console.WriteLine($"Viz Id Added: {viz.VizId}");
            }
        }

        await JSRuntime.InvokeVoidAsync("loadRevealViewWithDom", "revealView", dashboardDocument.ToJsonString());
    }

    private void LoadDashboardById(string dashboardName, string visualizationId)
    {
        // This is your custom method to maybe highlight or mark selection.
    }

    private string SelectCustomCss(string key)
    {
        return key == selectedVizKey
            ? "background-color: #ededed; border-left: 4px solid #09B1A9;" 
            : string.Empty;
    }
}
