@page "/filter-api"
@using RevealBlazorServer.Models
@inject DashboardService DashboardService
@inject IJSRuntime JSRuntime

<div class="row-layout filter-api-container">
    <div class="column-layout group">
        @if (employeeInfo == null)
        {
            <p>Loading employees...</p>
        }
        else
        {
            <IgbList class="list" filter_api-scope>
                @foreach (var item in employeeInfo)
                {
                    <IgbListItem @onclick="@(() => OnEmployeeCardClicked(item))">
                        <IgbAvatar Src="@(item.Employee?.PhotoPath ?? string.Empty)" slot="start" class="avatar" filter_api-scope></IgbAvatar>
                        <div slot="title">@item.FullName</div>
                        <div slot="subtitle">@item.Employee?.Title</div>
                    </IgbListItem>
                }
            </IgbList>
        }
    </div>
    <div class="column-layout group_1">
        <div id="revealView" class="reveal-dash-board" style="height: calc(100vh - 0px); width: 100%; position:relative;"></div>
    </div>
</div>

@code {
    private int selectedEmployee;
    private List<EmployeeInfo> employeeInfo;
    private bool readyToRender = false;

    protected override async Task OnInitializedAsync()
    {
        employeeInfo = await DashboardService.GetEmployeesAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("loadRevealView", "revealView", "Employee Sales Analysis");
        }
    }

    private async Task OnEmployeeCardClicked(EmployeeInfo employeeData)
    {
        selectedEmployee = employeeData.Employee?.EmployeeID ?? 0;

        if (selectedEmployee != 0)
        {
            await JSRuntime.InvokeVoidAsync("setDashboardFilter", "revealView", "EmployeeID", selectedEmployee);
        }
    }
}